#include "apptask.h"

// TODO: Task functions - Declarations
// static void TestTask(void *pvParameters);

void SetupHardware(void)
{
    // TODO: I/O setup
}

void SetupFreeRTOS(void)
{
//    TimerHandle_t xTimer;
//
//    /* Create the queue. */
//    xQueue = xQueueCreate(mainQUEUE_LENGTH, sizeof ( unsigned long));
//
//    if (xQueue != NULL)
//    {
//        /* Create the two tasks as described in the comments at the top of this
//        file. */
//        xTaskCreate(prvQueueReceiveTask, /* The function that implements the task. */
//                    "Rx", /* The text name assigned to the task - for debug only as it is not used by the kernel. */
//                    configMINIMAL_STACK_SIZE, /* The size of the stack to allocate to the task. */
//                    (void *) mainQUEUE_RECEIVE_PARAMETER, /* The parameter passed to the task - just to check the functionality. */
//                    mainQUEUE_RECEIVE_TASK_PRIORITY, /* The priority assigned to the task. */
//                    NULL); /* The task handle is not required, so NULL is passed. */
//
//        xTaskCreate(prvQueueSendTask, "TX", configMINIMAL_STACK_SIZE, (void *) mainQUEUE_SEND_PARAMETER, mainQUEUE_SEND_TASK_PRIORITY, NULL);
//
//        /* Create the blinky software timer as described at the top of this
//        file. */
//        xTimer = xTimerCreate("Blinky", /* A text name, purely to help debugging. */
//                              (50 / portTICK_PERIOD_MS), /* The timer period. */
//                              pdTRUE, /* This is an auto-reload timer, so xAutoReload is set to pdTRUE. */
//                              (void *) 0, /* The ID is not used, so can be set to anything. */
//                              prvBlinkyTimerCallback /* The callback function that inspects the status of all the other tasks. */
//                              );
//
//        /* static void prvBlinkyTimerCallback( TimerHandle_t xTimer ); */
//
//        if (xTimer != NULL)
//        {
//            xTimerStart(xTimer, mainDONT_BLOCK);
//        }
    }

    // TODO: Task functions - Definitions